# 🤖 Automatic GitHub Profile Stats Generator
#
# 📋 SETUP INSTRUCTIONS FOR NEW USERS:
# 1. Copy this workflow file to: .github/workflows/update-stats.yml
# 2. Go to your repository Settings > Secrets and variables > Actions
# 3. Add these secrets:
#    - GITHUB_TOKEN: Your GitHub Personal Access Token (with repo permissions)
#    - GEMINI_API_KEY: Your Google Gemini API key for code analysis
# 4. That's it! The workflow will automatically download the latest script and run daily
#
# 🔧 CUSTOMIZATION (optional):
# - Edit the cron schedule below to change when it runs
# - The script will automatically use your GitHub username
# - Config is downloaded automatically and customized for your account

name: Update Profile Stats

on:
  # Run daily at 2 AM UTC (customize this schedule as needed)
  schedule:
    - cron: "0 2 * * *"

  # Allow manual trigger (click "Run workflow" in Actions tab)
  workflow_dispatch:

  # Run on pushes to main branch (only if workflow changes)
  push:
    branches: [main]
    paths:
      - ".github/workflows/update-stats.yml"

jobs:
  update-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Download latest script and config
        run: |
          echo "📥 Downloading latest script from repository..."
          if curl -fsSL https://raw.githubusercontent.com/alessandrobrunoh/update-profile-stats-script/refs/heads/main/script.py -o script.py; then
            echo "✅ Script downloaded successfully"
          else
            echo "❌ Failed to download script"
            exit 1
          fi

          echo "📥 Downloading default configuration..."
          if curl -fsSL https://raw.githubusercontent.com/alessandrobrunoh/update-profile-stats-script/refs/heads/main/config.toml -o config.toml; then
            echo "✅ Configuration downloaded successfully"
          else
            echo "❌ Failed to download configuration"
            exit 1
          fi

      - name: Install required dependencies
        run: |
          echo "📦 Installing required dependencies..."
          python -m pip install --upgrade pip
          pip install tomli
          echo "✅ Dependencies installed"

      - name: Get repository owner username
        id: get-username
        run: |
          USERNAME="${{ github.repository_owner }}"
          if [ -z "$USERNAME" ]; then
            echo "❌ Could not detect repository owner"
            exit 1
          fi
          echo "username=$USERNAME" >> $GITHUB_OUTPUT
          echo "🔍 Detected repository owner: $USERNAME"

      - name: Update config with repository owner
        run: |
          echo "⚙️ Updating configuration with repository owner..."
          cat > update_config.py << 'EOF'
          import re

          # Read the config file
          with open('config.toml', 'r') as f:
              content = f.read()

          # Replace the username
          new_content = re.sub(
              r'username = "alessandrobrunoh"',
              'username = "${{ steps.get-username.outputs.username }}"',
              content
          )

          # Write back the config file
          with open('config.toml', 'w') as f:
              f.write(new_content)

          print("Configuration updated successfully")
          EOF

          if python update_config.py; then
            echo "✅ Configuration updated"
          else
            echo "❌ Failed to update configuration"
            exit 1
          fi
          rm -f update_config.py

      - name: Validate configuration
        run: |
          echo "🔍 Validating configuration..."
          cat > validate_config.py << 'EOF'
          import tomli

          try:
              with open('config.toml', 'rb') as f:
                  config = tomli.load(f)
              print('✅ Configuration file is valid')
              print(f'📋 Username: {config["github"]["username"]}')
              print(f'📋 Model: {config["gemini"]["model"]}')
          except Exception as e:
              print(f'❌ Configuration validation failed: {e}')
              exit(1)
          EOF

          if python validate_config.py; then
            echo "✅ Configuration validation passed"
          else
            echo "❌ Configuration validation failed"
            exit 1
          fi
          rm -f validate_config.py

      - name: Run profile stats script
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🚀 Running profile stats script..."
          echo "🔑 Using GITHUB_TOKEN and GEMINI_API_KEY from repository secrets"
          echo "👤 Repository owner: ${{ github.repository_owner }}"

          if [ -z "$GITHUB_TOKEN" ]; then
            echo "❌ GITHUB_TOKEN secret is not set"
            exit 1
          fi

          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ GEMINI_API_KEY secret is not set"
            exit 1
          fi

          if python script.py; then
            echo "✅ Script executed successfully"
          else
            echo "❌ Script execution failed"
            exit 1
          fi

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -f "PROFILE_README.md" ]; then
            echo "profile_readme_exists=true" >> $GITHUB_OUTPUT
            if [ -n "$(git status --porcelain PROFILE_README.md README.md 2>/dev/null)" ]; then
              echo "changes_detected=true" >> $GITHUB_OUTPUT
              echo "✅ Changes detected in generated files"
            else
              echo "changes_detected=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No changes detected"
            fi
          else
            echo "profile_readme_exists=false" >> $GITHUB_OUTPUT
            echo "❌ PROFILE_README.md not found"
            exit 1
          fi

      - name: Commit and push updated files
        if: steps.verify-changed-files.outputs.changes_detected == 'true'
        run: |
          echo "📝 Configuring git..."
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          echo "📄 Copying PROFILE_README.md to README.md..."
          cp PROFILE_README.md README.md

          echo "➕ Adding files to git..."
          git add PROFILE_README.md README.md

          echo "💾 Committing changes..."
          git commit -m "🤖 Update profile stats - $(date -u '+%Y-%m-%d %H:%M UTC')"

          echo "🚀 Pushing changes..."
          git push
          echo "✅ Changes committed and pushed successfully"

      - name: No changes to commit
        if: steps.verify-changed-files.outputs.changes_detected == 'false'
        run: echo "ℹ️ No changes detected, skipping commit"

      - name: Cleanup downloaded files
        if: always()
        run: |
          echo "🧹 Cleaning up downloaded files..."
          rm -f script.py config.toml update_config.py validate_config.py
          echo "✅ Cleanup completed"
