# Configuration for the GitHub Profile Stats Script

[github]
username = "alessandrobrunoh"
exclude_repos = ["repo1-to-exclude", "repo2-to-exclude"]
exclude_languages = ["CSS", "HTML", "SCSS", "Less"]
exclude_generated_code = true
min_commits_for_proficiency = 5
min_lines_for_proficiency = 100

[exclusions]
# Files to exclude from analysis
exclude_files = [
    ".gitignore",
    "package-lock.json",
    "yarn.lock",
    "go.sum",
    "go.mod",
    "*.min.js",
    "*.min.css",
    "*.bundle.js",
    "*.chunk.js"
]

# Directories to exclude from analysis
exclude_dirs = [
    "node_modules",
    ".git",
    "dist",
    "build",
    "vendor",
    "target",
    "generated",
    "auto-generated",
    ".gradle",
    ".mvn"
]

# Generated code patterns to detect and exclude
generated_code_patterns = [
    "jhipster",
    "yeoman",
    "scaffolding",
    "auto-generated",
    "do not edit",
    "generated by",
    "this file was automatically generated",
    "code generated by",
    "autogenerated on"
]

# Framework-specific generated files
framework_generated_files = [
    # Angular
    "*.spec.ts",
    "karma.conf.js",
    "protractor.conf.js",

    # React
    "public/index.html",
    "src/reportWebVitals.js",
    "src/setupTests.js",

    # Vue
    "vue.config.js",

    # Spring Boot / JHipster
    "src/main/webapp/app/app.module.ts",
    "src/main/webapp/app/app-routing.module.ts",
    "src/main/resources/config/application*.yml",

    # Generated migrations
    "**/migrations/**",
    "**/db/migrate/**"
]

[gemini]
# Model to use for code analysis
model = "gemini-2.5-flash"

# Prompt for code quality analysis
quality_prompt = """
Analyze the following code snippet and provide a single, estimated quality score between 0 and 100.
Consider factors like complexity, maintainability, best practices, comments, error handling, and code style.
Return only the integer score.
"""

# Prompt for generated code detection
generated_code_prompt = """
Analyze this code snippet and determine if it appears to be auto-generated or scaffolded code.
Look for patterns like:
- Repetitive boilerplate structures
- Generic variable names (item1, item2, etc.)
- Auto-generated comments
- Scaffolding patterns from tools like JHipster, Yeoman, etc.
- Code generation markers

Respond with only: "GENERATED" or "MANUAL"
"""

# Prompt for language proficiency estimation
proficiency_prompt = """
Based on this code sample in {language}, estimate the developer's proficiency level.
Consider:
- Code complexity and sophistication
- Use of advanced language features
- Code organization and patterns
- Best practices adherence
- Problem-solving approach

Rate from 1-10 where:
1-3: Beginner (basic syntax, simple operations)
4-6: Intermediate (good understanding, some advanced features)
7-8: Advanced (sophisticated patterns, optimization)
9-10: Expert (mastery of language, innovative solutions)

Respond with only the number (1-10).
"""

[proficiency]
# Language proficiency calculation weights
commits_weight = 0.3
lines_of_code_weight = 0.25
code_quality_weight = 0.25
repository_count_weight = 0.1
complexity_weight = 0.1

# Proficiency level descriptions
levels = [
    "üî∞ Novice",
    "üìö Learning",
    "‚ö° Developing",
    "üí™ Competent",
    "üéØ Proficient",
    "üöÄ Advanced",
    "‚≠ê Expert",
    "üèÜ Master"
]

[output]
# Markdown styling options
use_emoji = true
use_badges = true
use_charts = true
include_last_updated = true

# Color scheme for badges and charts
primary_color = "#0066cc"
secondary_color = "#28a745"
accent_color = "#ffc107"
background_color = "#f8f9fa"
